- name: Build Ubuntu 22.04 image with LUKS, LVM, keyfile and TPM Clevis firstboot setup
  hosts: localhost
  become: true
  vars:
    image_file: /tmp/ubuntu.img
    image_size: 11G
    loop_device: /dev/loop20
    keyfile_path: /root/crypt.key
    mount_root: /mnt/root
    ubuntu_release: jammy
    default_user: ubuntu
    mirror_url: http://archive.ubuntu.com/ubuntu
    logical_volumes:
      - { name: "root",    label: "root",           size: 3G,   final_size: 10G, mountpoint: "/" }
      - { name: "home",    label: "home",           size: 100M, final_size: 5G, mountpoint: "/home" }
      - { name: "var",     label: "var",            size: 2G,   final_size: 10G, mountpoint: "/var/" }
      - { name: "tmp",     label: "var-tmp",        size: 1G,   final_size: 5G, mountpoint: "/var/tmp" }
      - { name: "docker",  label: "var-lib-docker", size: 100M, final_size: 2G, mountpoint: "/var/lib/docker" }
      - { name: "log",     label: "var-log",        size: 1G,   final_size: 2G, mountpoint: "/var/log" }
      - { name: "audit",   label: "var-log-audit",  size: 100M, final_size: 1G, mountpoint: "/var/log/audit" }
      - { name: "ceph",    label: "vol-ceph",       size: 100M, final_size: 1G, mountpoint: "/var/log/ceph" }
      - { name: "kolla",   label: "vol-kolla_logs", size: 100M, final_size: 1G, mountpoint: "/var/lib/docker/volumes/kolla_logs" }
      - { name: "mariadb", label: "vol-mariadb",    size: 100M, final_size: 1G, mountpoint: "/var/lib/docker/volumes/mariadb" }
      - { name: "swap",    label: "swap",           size: 500M, final_size: 1G, mountpoint: "" }
    myhostname: install-host
    autologin_consoles:
      - getty@tty1
      - serial-getty@ttyS0
  vars_files:
    - vars/packages.yml

  tasks:
    - name: Create image file
      command: qemu-img create {{ image_file }} {{ image_size }}
      # args:
      #   creates: "{{ image_file }}"

    - name: Associate loop device
      command: losetup -P {{ loop_device }} {{ image_file }}

    - name: Create GPT partition table
      command: parted -s {{ loop_device }} mklabel gpt

    ### Removed Legay Boot
    #
    # - name: Create BIOS boot partition (1MiB - 2MiB)
    #   command: parted -s {{ loop_device }} mkpart primary 1MiB 2MiB

    # - name: Set bios_grub flag on first partition
    #   command: parted -s {{ loop_device }} set 1 bios_grub on

    - name: Create /boot/efi partition
      command: parted -s {{ loop_device }} mkpart OSISM_HV_EFI_PARTITION fat32 1MiB 1024MiB

    - name: Create /boot partition (512MiB - 1536MiB)
      command: parted -s {{ loop_device }} mkpart OSISM_HV_BOOT_PARTITION ext4 1024MiB 2048MiB

    - name: Create root partition (1536MiB - 100%)
      command: parted -s {{ loop_device }} mkpart OSISM_HV_LVM_PARTITION ext4 2048MiB 100%

    - name: Set boot flag on EFI partition
      command: parted -s {{ loop_device }} set 1 boot on

    - name: Set esp flag on EFI partition
      command: parted -s {{ loop_device }} set 1 esp on

    - name: Set legacy_boot flag on BOOT partition
      command: parted -s {{ loop_device }} set 2 legacy_boot on

    - name: Set lvm flag on root partition
      command: parted -s {{ loop_device }} set 3 lvm on

    - name: Wait for partitions to appear
      command: udevadm settle

    - name: Format efi partition
      command: mkfs.vfat -n esp -F 32 {{ loop_device }}p1

    - name: Format /boot partition
      command: mkfs.ext4 -L boot {{ loop_device }}p2

    - name: Create keyfile directory
      file:
        path: files
        state: directory

    - name: Generate crypt keyfile
      command: dd if=/dev/urandom of=files/crypt.key bs=4096 count=1
      args:
        creates: files/crypt.key

    - name: Set permissions on keyfile
      file:
        path: files/crypt.key
        mode: '0400'

    - name: Copy keyfile to root
      copy:
        src: files/crypt.key
        dest: "{{ keyfile_path }}"
        mode: '0400'

    - name: Format root partition with LUKS using keyfile
      command: cryptsetup luksFormat {{ loop_device }}p3 {{ keyfile_path }} --type luks2 --batch-mode

    - name: Open LUKS partition
      command: cryptsetup open {{ loop_device }}p3 cryptroot --key-file {{ keyfile_path }}

    - name: Create physical volume on cryptroot
      command: pvcreate /dev/mapper/cryptroot

    - name: Create volume group system
      command: vgcreate system /dev/mapper/cryptroot

    - name: Create all logical volumes
      command: lvcreate -L {{ item.size }} -n {{ item.name }} system
      loop: "{{ logical_volumes }}"

    - name: Format all LVs
      command: mkfs.ext4 -L {{ item.label }} /dev/system/{{ item.name }}
      loop: "{{ logical_volumes }}"
      when: item.name != "swap"

    - name: Format swap LV
      command: mkswap /dev/system/swap
  
    - name: Mount root LV
      command: mount /dev/system/root {{ mount_root }}      

    - name: Mount /boot
      command: >
        bash -c "mkdir -p {{ mount_root }}/boot &&mount {{ loop_device }}p2 {{ mount_root }}/boot"

    - name: Mount /boot/efi
      command: >
        bash -c "mkdir -p {{ mount_root }}/boot/efi &&mount {{ loop_device }}p1 {{ mount_root }}/boot/efi"

    - name: Mount all logical volumes
      mount:
        path: "{{ mount_root }}/{{ item.mountpoint }}"
        src: "/dev/system/{{ item.name }}"
        fstype: ext4
        state: mounted
      loop: "{{ logical_volumes }}"
      when: item.name != "swap" and item.name != "root"

    - name: Copy directory recursively
      copy:
        src: copydir/
        dest: "{{ mount_root }}/"

    - name: Bootstrap Ubuntu base system with kernel, grub, cryptsetup, lvm2, clevis and tpm2-tools
      command: >
        debootstrap
        --components=main,universe,multiverse
        --arch=amd64
        --cache-dir=/var/cache/debootstrap
        --include=linux-image-generic,dracut,cryptsetup,lvm2,clevis,clevis-dracut,clevis-luks,clevis-tpm2,tpm2-tools,vim,bash-completion,passwd,python3,python3-cffi-backend,openssh-server,binutils,parted,gdisk
        {{ ubuntu_release }} {{ mount_root }} {{ mirror_url }}

    - name: Configure apt sources.list inside chroot
      copy:
        dest: "{{ mount_root }}/etc/apt/sources.list"
        content: |
          deb http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse

    - name: Mount virtual filesystems for chroot
      block:
        - command: mount --bind /dev {{ mount_root }}/dev
        - command: mount --bind /proc {{ mount_root }}/proc
        - command: mount --bind /sys {{ mount_root }}/sys

    - name: Update package lists inside chroot
      command: chroot {{ mount_root }} apt-get update

    - name: Upgrade all packages to latest inside chroot
      command: chroot {{ mount_root }} apt-get -y full-upgrade

    - name: Install required packages inside chroot
      command: >
        chroot {{ mount_root }}
        apt-get -y install --install-recommends {{ packages | join(' ') }}

    - name: Clean up apt cache inside chroot
      command: chroot {{ mount_root }} apt-get clean

    - name: Copy keyfile into image root
      copy:
        src: files/crypt.key
        dest: "{{ mount_root }}/root/crypt.key"
        mode: '0400'

    - name: Get UUID of crypto partition
      command: blkid -s UUID -o value {{ loop_device }}p3
      register: crypto_uuid

    - name: Configure /etc/crypttab with keyfile
      copy:
        dest: "{{ mount_root }}/etc/crypttab"
        content: |
          cryptroot UUID={{ crypto_uuid.stdout }} /root/crypt.key luks

    - name: Get UUID of boot partition
      command: blkid -s UUID -o value {{ loop_device }}p2
      register: boot_uuid

    - name: Get UUID of efi partition
      command: blkid -s UUID -o value {{ loop_device }}p1
      register: efi_uuid

    - name: Configure /etc/fstab
      copy:
        dest: "{{ mount_root }}/etc/fstab"
        content: |
          /dev/mapper/system-root / ext4 defaults 0 1
          /dev/mapper/system-swap none swap sw 0 0
          UUID={{ boot_uuid.stdout }} /boot ext4 defaults 0 2
          UUID={{ efi_uuid.stdout }} /boot/efi vfat defaults 0 2
          #LABEL=root / ext4 rw,defaults 0 1
          #LABEL=boot /boot ext4 defaults,noauto,x-systemd.automount 0 2
          #LABEL=esp /boot/efi vfat defaults,noauto,x-systemd.automount 0 2
          LABEL=home /home ext4 defaults 0 2
          LABEL=var /var ext4 defaults 0 2
          LABEL=var-tmp /var/tmp ext4 defaults,noauto,x-systemd.automount 0 2
          LABEL=var-lib-docker /var/lib/docker ext4 defaults,noauto,x-systemd.growfs,x-systemd.automount 0 2
          LABEL=var-log /var/log ext4 defaults,noauto,x-systemd.automount 0 2
          LABEL=var-log-audit /var/log/audit ext4 defaults,noauto,x-systemd.automount 0 2

          # extra volumes for docker container
          LABEL=vol-ceph /var/log/ceph ext4 defaults,noauto,x-systemd.automount 0 2
          LABEL=vol-kolla_logs /var/lib/docker/volumes/kolla_logs ext4 defaults,noauto,x-systemd.automount 0 2
          LABEL=vol-mariadb /var/lib/docker/volumes/mariadb ext4 defaults,noauto,x-systemd.automount 0 2

          tmpfs /tmp tmpfs defaults,mode=1777,strictatime,nosuid,nodev,size=50%,nr_inodes=1m 0 0

    - name: Set German keyboard layout in /etc/default/keyboard inside chroot
      copy:
        dest: "{{ mount_root }}/etc/default/keyboard"
        content: |
          XKBMODEL="pc105"
          XKBLAYOUT="de"
          XKBVARIANT=""
          XKBOPTIONS=""
          BACKSPACE="guess"

    - name: Ensure keyboard-configuration is set for reconfigure
      copy:
        dest: "{{ mount_root }}/etc/default/console-setup"
        content: |
          ACTIVE_CONSOLES="/dev/tty[1-6]"
          CHARMAP="UTF-8"
          CODESET="Lat15"
          FONTFACE="Fixed"
          FONTSIZE="8x16"

    - name: Set hostname in /etc/hostname
      copy:
        dest: "{{ mount_root }}/etc/hostname"
        content: "{{ myhostname }}\n"

    - name: Configure /etc/hosts
      copy:
        dest: "{{ mount_root }}/etc/hosts"
        content: |
          127.0.0.1   localhost
          127.0.1.1   {{ myhostname }}

          # IPv6 defaults
          ::1     localhost ip6-localhost ip6-loopback
          ff02::1 ip6-allnodes
          ff02::2 ip6-allrouters

    - name: Create systemd override directories for autologin
      file:
        path: "{{ mount_root }}/etc/systemd/system/{{ item }}.service.d"
        state: directory
        mode: '0755'
      loop: "{{ autologin_consoles }}"

    - name: Enable root autologin on consoles
      copy:
        dest: "{{ mount_root }}/etc/systemd/system/{{ item }}.service.d/override.conf"
        content: |
          [Service]
          ExecStart=
          {% if item == "getty@tty1" %}
          ExecStart=-/sbin/agetty --autologin root --noclear %I $TERM
          {% else %}
          ExecStart=-/sbin/agetty --autologin root --keep-baud 115200,38400,9600 %I $TERM
          {% endif %}
      loop: "{{ autologin_consoles }}"

    - name: Run dpkg-reconfigure keyboard-configuration in chroot (optional, may need binfmt support)
      command: chroot {{ mount_root }} dpkg-reconfigure -f noninteractive keyboard-configuration
      ignore_errors: true

    # - name: Setup grub and update initramfs in chroot
    #   shell: |
    #     chroot {{ mount_root }} /bin/bash -c "\
    #       echo 'root:root' | chpasswd && \
    #       echo 'GRUB_ENABLE_CRYPTODISK=y' >> /etc/default/grub && \
    #       echo 'KEYFILE_PATTERN=/root/crypt.key' > /etc/cryptsetup-initramfs/conf-hook && \
    #       update-initramfs -u && \
    #       grub-install --target=x86_64-efi --efi-directory=/boot/efi --removable --recheck && \
    #       update-grub"

    - name: Configure base system packages
      command: chroot {{ mount_root }} dpkg --configure -a

    - name: Setup systemd-boot bootctl
      shell: |
        chroot {{ mount_root }} /bin/bash -c "\
          bootctl install"
      ignore_errors: true

    - name: UCreate UKI UEFI boot image in chroot
      vars:
        kversion: "{{ lookup('pipe', 'ls ' ~ mount_root ~ '/lib/modules | sort | tail -n1') }}"
      shell: |
        chroot {{ mount_root }} /bin/bash -c "\
          echo 'root:root' | chpasswd && \
          dracut --uefi --add clevis --add crypt --add lvm \
                --add-drivers 'virtio_pci virtio_net virtio_blk virtio_scsi ahci dm_mod' \
                --include /root/crypt.key /root/crypt.key \
                --kver {{ kversion }} --force"


    - name: Copy enlarge Volumes script for first boot
      copy:
        dest: "{{ mount_root }}/root/enlarge-volumes.sh"
        mode: '0750'
        content: |
          #!/bin/bash
          sgdisk -e /dev/sda
          partprobe /dev/sda
          parted /dev/sda resizepart 3 100%
          cryptsetup resize /dev/mapper/cryptroot -d /root/crypt.key
          pvresize /dev/mapper/cryptroot
          {% for lv in logical_volumes %}
          lvextend -r -L {{ lv.final_size }} /dev/system/{{ lv.name }}
          {% endfor %}


    - name: Copy TPM binding script for first boot
      copy:
        dest: "{{ mount_root }}/root/setup-clevis-tpm.sh"
        mode: '0750'
        content: |
          #!/bin/bash
          set -euo pipefail
          KEYFILE="/root/crypt.key"
          if [ ! -e /dev/tpmrm0 ]; then
            echo "TPM2 device not found."
            exit 1
          fi
          echo "Binding "{{ crypto_uuid.stdout }}" to TPM2 via Clevis..."
          clevis-luks-bind -f -d /dev/disk/by-uuid/"{{ crypto_uuid.stdout }}" -k $KEYFILE tpm2 '{}'
          echo "Clevis TPM binding complete."
          rm -f /root/setup-clevis-tpm.sh
          rm -f $KEYFILE
          sed -i s*\/root\/crypt.key*none*g /etc/crypttab
          update-initramfs -k all -u

    - name: Install systemd service to run enlarge volumes setup script once
      copy:
        dest: "{{ mount_root }}/etc/systemd/system/enlarge-volumes-setup.service"
        content: |
          [Unit]
          Description=Enlarge Logical Volumes after Boot
          After=network.target

          [Service]
          Type=oneshot
          ExecStart=/root/enlarge-volumes.sh
          ExecStartPost=/bin/systemctl disable enlarge-volumes-setup.service
          RemainAfterExit=no

          [Install]
          WantedBy=multi-user.target

    - name: Enable clevis TPM setup systemd service
      shell: chroot {{ mount_root }} systemctl enable enlarge-volumes-setup.service

    - name: Install systemd service to run clevis TPM setup script once
      copy:
        dest: "{{ mount_root }}/etc/systemd/system/clevis-tpm-setup.service"
        content: |
          [Unit]
          Description=Bind root device to TPM2 via clevis
          After=enlarge-volumes-setup.service

          [Service]
          Type=oneshot
          ExecStart=/root/setup-clevis-tpm.sh
          ExecStartPost=/bin/systemctl disable clevis-tpm-setup.service
          RemainAfterExit=no

          [Install]
          WantedBy=multi-user.target

    - name: Enable clevis TPM setup systemd service
      shell: chroot {{ mount_root }} systemctl enable clevis-tpm-setup.service

    - name: Initial Netplan Configuration
      ignore_errors: yes
      copy:
        dest: /mnt/root/etc/netplan/01-dhcp.yaml
        content: |
          network:
            version: 2
            ethernets:
              enp1s0:
                dhcp4: true

    - name: Get UUID of loop device
      command: blkid -s UUID -o value {{ loop_device }}
      register: base_dev_uuid

    - name: Unmount virtual filesystems and cleanup
      ignore_errors: yes
      block:
        - shell: |
            swapoff /dev/system/swap || true
            umount {{ mount_root }}/dev || true
            umount {{ mount_root }}/proc || true
            umount {{ mount_root }}/sys || true
            umount {{ mount_root }}/boot/efi || true
            umount {{ mount_root }}/boot
            umount -R {{ mount_root }} || true
        - command: vgchange -an
        - command: cryptsetup close cryptroot
        - command: losetup -d {{ loop_device }}